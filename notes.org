#+TITLE:Followup
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Followup for CSC420 Operating Systems Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* What is this?

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the
  *homework* (if any). The first point of call for any questions
  should be the FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my
  courses), and a [[https://github.com/birkenkrahe/os420/blob/main/FAQ.org][FAQ for CSC420]].

  You find the whiteboard photos [[https://drive.google.com/drive/folders/1A5gp0fIiVz126IbU9VKBKejF8xyNKQLW?usp=sharing][here in GDrive]].

* w1s1 (01/11/22)
** Homework (by Thursday 13-Jan)

   * [[https://github.com/][Register with GitHub]] (5 min)
   * Complete the [[https://docs.github.com/en/get-started/quickstart/hello-world][GitHub Hello World exercise]] (20 min)
   * +Give me your GitHub user name (email - with course ID - or
     Thursday in class)+ (no need - course is public)
   * Submit an issue to ~birkenkrahe/os420~ which confirms that you
     did the exercise!

** Stuff

   * [[https://github.com/birkenkrahe/os420/blob/main/agenda.org][Agenda]] - we covered all of it (and more) - agenda is available in
     GitHub only

   * There's been a long and still open debate in software engineering
     and computer science about the importance of learning languages
     over learning concepts.

   * When people speak of Linux they usually mean the 'kernel' (the
     part of the OS that's always "on"). When they say GNU/Linux, they
     mean kernel + a bundle of functions. The word "kernel" contains
     the German word 'Kern' for nucleus, or core (which in turn, I
     think, comes from the Latin word for heart, 'cor').

   * Showed a few books to demonstrate the relevance of Linux and
     command line skills to cybersecurity:

     [[./img/cybersec.png]]

     [[./img/hackers.png]]

   * [[https://www-zeuthen.desy.de/apewww/APE/software/asm/anext/][More about the APE]] (Ital. for "bee") parallel computer from the
     German particle lab DESY, Hamburg, and University of Rome La
     Sapienzia, Rome. Incidentally, one of the creators of this
     machine was [[https://en.wikipedia.org/wiki/Giorgio_Parisi][Giorgio Parisi]], who received the Nobel Prize for
     physics 2021 for [[https://arxiv.org/abs/cond-mat/0205297][his work on complexity]] (Parisi, 2022). One of my
     graduate student jobs was to take care of the first APE.

     [[./img/bees.gif]]

   * Showed Windows Cmd line, Windows PowerShell, and the ~bash~ shell,
     and summoned the wrath of Bill Gates by putting down Microsoft's
     attempts to provide half-hearted OS access. The GIF shows how the
     OS world might look like without Microsoft, Apple, Google:
     everybody's running Open Source (Linux)!

     [[./img/marathon.gif]]

   * Demonstrated remotely accessing a Linux from a Windows box using
     ~ssh~ both on the shell and inside GNU Emacs (using the Tramp
     package and the program ~plink~, which is part of ~PuTTY~).

     [[./img/tramp.gif]]

* w1s2 (01/13/22)
** GitHub assignment/DataCamp

   * DataCamp: You should all be in your courses now.
     - Your assignments are on one page but you'll be notified via
       schoology as soon as an assignment is due

   #+attr_html: :width 400px
   #+caption: DataCamp OS course member list
   [[./img/members.png]]

   * Importance of README files for packages that (super) users can
     build from source for their computer architecture (CPU) and OS

   * Git is about version control, developed by Linus Torvalds, who
     also is the ~main~ branch maintainer for the Linux kernel. Here
     is [[https://github.com/torvalds/linux][his GitHub repo with the kernel]].

   * This is what I was thinking of - worth watching: [[https://youtu.be/V5S8kFvXpo4][The Computer
     Chronicles - Operating Systems (1984)]]

     #+attr_html: :width 400px
     #+caption: Computer chronicles-OS (1984)
     [[./img/history.png]]

     * However, my first thought, [[https://youtu.be/KG-mqHoXOXY][History of Databases (2019)]] is also
       really relevant for OS, because it shows how an important
       application (database management systems) is developed in concert
       with the operating systems on which it runs

** Lecture on OS foundations

   * Why different models? Each POV is a different model. Models change
     with time and represent focus and interests (e.g. IT careers)

   #+attr_html: :width 400px
   #+caption: OS and computer hardware w/peripherals
   [[./img/hw.png]]

   * Diversity of architecture is like gaming success: a team
     consisting of 1 wizard + 1 dwarf + 1 elf has better chances to
     win than teams of three of each.

   #+attr_html: :width 400px
   #+caption: Architecture of Information Systems (ARIS) model
   [[./img/aris.png]]

   * Distinguish between PCs (solo), workstations (group, specific
     apps), and mainframe. They have different OS types.

** GNU Emacs installation

   #+attr_html: :width 600px
   #+caption: Real Programmers Use Emacs (Source: xkcd).
   [[./img/real_programmers.png]]

   * xkcd (xkcd.com) is a cartoonist/nerd with a healthy appreciation
     for IT and computing (and also science)
   * ~nano~ is a tiny GNU/Linux based editor
   * ~vim~ is another (slightly larger) GNU/Linux based editor
     (available for Windows and Mac)
   * ~ed~ is another editor, and ~sed~ on GNU/Linux is important for
     data science on the command line
   * ~cat~ is a viewing program

   * GNU Emacs v27 Windows installation: you need the
     ~emacs-27.1-x86_64-installer.exe~ [[http://gnu.freemirror.org/gnu/emacs/windows/emacs-27/][from this page]].

* w2s3 (01/18/22)
** Quiz 1


   THE QUIZ IS ON ... Schoology 9.30 - 9.45 AM

   FOLLOWED by brief FEEDBACK:

   * We'll do one of these per week
   * Any content questions?
   * Too much time? Too little?
   * Questions too hard? Too easy?
   * You should be able to see the correct solutions for rehearsal
   * A subset of these questions will become the final exam

** OS functions

   (Source: [[https://youtu.be/V5S8kFvXpo4][the Computer Chronicles 1984]])

   1. Establish interface
   2. Permit multiple users
   3. Manage data files
   4. Handle I/O
   5. Error recovery
   6. System accounting
   7. Maintenance accounting
   -----
   * CP/M: IBM PC operating system
   * Apple IIe (BASIC) - early Apple PC
   * FORTRAN (FORmula TRANslator - sci comp language)
   * New kids: Go(lang), Rust,...but in OS, C programming rules

** Review - OS position and purpose

   ABSTRACTION[fn:1]:
   * The computer can be viewed from different angles (models):
     - Computer architecture (e.g. ARIS or CPU+RAM+NVM)
     - User + applications + OS + hardware

   ARBITRATION[fn:2]:
   * The main (defining) job of the OS is to control and allocate
     computer resources
   * Users want easy of use + performance + hidden from view
   * Shared computers include mainframes and dedicated workstations

   DEFINITION:
   * The OS kernel is the program that runs on your computer at all
     times, and is always in (volatile) memory

   | COMPUTER PROGRAMS            | EXAMPLES           |
   |------------------------------+--------------------|
   | Operating System (OS) kernel | ~systemd~ /daemon/ |
   | System (control) programs    | ~bash~ /shell/     |
   | Application (user) programs  | ~emacs~ editor     |

** From bootstrapping to interrupts

   #+caption: A computer system (Source: Silberschatz et al, 2018)
   #+attr_html: :width 600px
   [[./img/system.png]]

   * Computer hardware = Motherboard (run) + Peripherals (I/O)

   * In the past, application software had to explicitly be connected
     and configured to the operating system (MS DOS, Apple DOS, CP/M)

   * Bootstrapping: the OS kernel program is loaded into (volatile)
     memory

   * Booting = the BIOS is executed, establishing the basic I/O
     structure

   * The system daemon (~systemd~ in Linux) starts other
     daemons/services

   * On Linux, firmware updates are not automatic, instead you apply
     them manually using ~sudo apt update~ and ~sudo apt upgrade -y~
     - ~sudo~ give super-user privileges
     - ~apt~ is a package manager program for Debian Linux systems
     - ~update~ and ~upgrade~ are system programs
     - ~-y~ is a flag ("do it without asking questions")

*** Input/Output (I/O) Operation

    #+caption: Input/Output (I/O) operation (schematic)
    #+attr_html: :width 600px
    [[./img/io.png]]


    | Organizational unit | Interrupt action                          |
    |---------------------+-------------------------------------------|
    | Device controller   | Raises interrupt signal                   |
    | CPU                 | Catches interrupt signal                  |
    |                     | Dispatches interrupt to interrupt handler |
    | Interrupt handler   | Clears interrupt                          |
    | CPU                 | Waits for next interrupt                  |

    #+caption: Input/Output (I/O) BPMN process diagram
    #+attr_html: :width 900px
    [[./img/ioprocess.png]]

    * [[https://www.apriorit.com/dev-blog/195-simple-driver-for-linux-os][Here is a tutorial]] to develop a simple device driver is developed
      (Savin, 2022). It doesn't do anything else but read characters
      from input and generating output on a device. The driver has to
      be attached to a file using the ~mknod~ - then the device can be
      addressed/configured etc. using that file.

* w2s4 (01/20/22)
** What does the OS manage? (With Linux examples)

   * Task / process management (ps -a)
   * Memory management (df -H)
   * File-system management (ls -la)
   * Network management (ifconfig) (ping)
   * Mass-storage management (sudo fdisk -l)

** Batch mode vs. interactive timesharing

   * Multitasking is a smart scheduling illusion
   * Virtual memory allows execution of large jobs
   * Timer used to prevent infinite loop or resource hogging

** User mode vs. kernel mode (with Linux examples)

   * Mode-bit (hardware) indicates user vs. kernel mode (hostname -a)
   * Kernel mode is privileged (sudo)
   * Modern OS: Virtual Machine Manager mode for guest VMs ([[https://www.virtualbox.org/][VirtualBox]])

** Captain's Log

   * We looked at different virtual OS solutions under Windows
     - Dual boot (incl Linux on USB)
     - [[https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6][Ubuntu Linux]] as a Microsoft App from the Microsoft Store - there are
       [[https://www.makeuseof.com/pros-cons-windows-subsystem-for-linux/][pros and cons]] (Delony, 2022), but more pros!
     - [[https://www.cygwin.com/][Cygwin]] (not a complete OS but many Linux functions)
     - ~ssh~ to a Linux box (I showed this for the Pi) - something you
       can do from within Emacs with the (pre-installed) ~Tramp~
       package ([[https://github.com/birkenkrahe/os420/blob/main/diary.org][FAQ]]).
     - [[https://www.oracle.com/virtualization/solutions/try-oracle-vm-virtualbox/][VirtualBox]] (works for many different OS)
   * We compared open source and commercial systems ("bloatware")
   * Linux has a package manager concept - you download/install only
     the software that you really need.
   * Linux will run on very old computers ("bare metal")
   * Three key issues in OS:
     - persistence (memory hardware)
     - concurrency (process mgmt)
     - virtualisation (memory mgmt)
   * ~sudo~ is the Linux command for mode-bit = 0 ("kernel mode")

* w3s5 (01/25/22)

  Captain's Log Star Date 99667.82

  * [[https://www.stoacademy.com/tools/stardate.php][Star Date Calculator]]

  * [[https://ish.app/][Linux for iOS devices]]

  * [[https://termux.com/][Termux: Linux for Android]] (get it via FDroid, not Google Play)

  * [[https://www.intel.com/content/www/us/en/gaming/resources/cpu-clock-speed.html][What is CPU Clock Speed?]] ([[intel][Intel]])

  * [[https://youtu.be/ciNHn38EyRc][SQL injection]] ([[sql][Computerphile, 2016]])

  * Online IDE: [[https://replit.com/][repl.it (replit.com)]] - REPL = Read-Eval-Print-Loop

  * ~bash(1)~ shell program - [[https://linux.die.net/man/1/bash][Unix manual page]]

* w3s6 (01/27/22)

  Captain's Log Stardate 99672.08

  * Assembly: last night, all the Pis were built with an improvised,
    family-based assembly line. Here is [[https://drive.google.com/drive/folders/1K8IguOpVoboFfX1r1pbncAHq3kP0TEtg?usp=sharing][the complete process]] from
    start to finish in the hands of my daughter Lucia.

    #+caption: assembly of the CanaKit Raspberry Pi for Dummies
    #+attr_html: :width 500px
    [[./img/assembly.png]]

  * NOOBS stands for "New Out Of Box Software" - an SD card-based
    installer for Pi. The Raspberry Pi Foundation now recommends to
    use an imager instead ([[https://www.raspberrypi.com/documentation/computers/getting-started.html][Source]]).

  * Windows Imager: https://rufus.ie/en/ - takes an OS image and
    unpacks (=flashes) it on a mass-storage device (e.g. a USB stick).

  * Better (for all OS): [[https://www.balena.io/etcher/][Balena Etcher]]. Works like a charm. Just for
    fun, try to flash [[https://trisquel.info/][GNU Linux Trisquel]] on a USB Stick: "Run
    free!". I've got this on my Windows PC via VirtualBox.

  * ~Hello World~ shell program problem under Windows: I realized that
    I had ~bash~ because I had installed the ~cygwin~ suite of
    tools. This is a really simply installation and you should do it
    (on your PC). Opens a world of (emulated) Linux commands.

  * Cygwin installation: [[https://cygwin.com/install.html][go to this page]], download and run the file
    ~setup-x86_64.exe~ that you see linked to at the top of the
    page. This will give you the Cygwin App and also bash (I
    believe). Worth trying out - let me know if it works!

  * Started the installation at 10.15 AM - and I personally finished
    the last installation at 3.30 pm of that day. Why did it take this
    long? I think mostly because the Pi's had a hard time getting all
    the stuff from the network - perhaps it's Lyon's fault. We'll
    never know because we won't have to do it again! Cp. "[[https://projects.raspberrypi.org/en/projects/noobs-install][Installing
    Raspbian with NOOBS]]" ([[noobs][Source]]).
    #+caption: NOOBS-based installation of Raspbian Linux "Buster"
    #+attr_html: :width 500px
    [[./img/install.png]]

  * Here are some views of the lab during installation. The last
    picture show Pi no. 12 attached to the front reception desktop PC
    so that I can present from the front.
    #+caption: Lab views during and after installation
    #+attr_html: :width 500px
    [[./img/lab.png]]

* w4s7 (02/01/22)
** Captain's Log Stardate 99687.04

  * I installed the OS ([[https://en.wikipedia.org/wiki/Raspberry_Pi_OS][Raspbian OS "Buster"]] - which you can find
    out with the command ~cat /etc/os-release~) on 10 of the 12
    Pi's, as well as Emacs, SQLite, and R.

    #+caption: /etc/os-release in the Windows Ubuntu App
    #+attr_html: :width 500px
    [[./img/ubuntu.png]]

    #+caption: /etc/os-release on Raspberry Pi
    #+attr_html: :width 500px
    [[./img/pios.png]]

  * UNIX man pages example: [[https://www.gnu.org/software/coreutils/manual/html_node/mv-invocation.html#mv-invocation][GNU manual page for ~mv~]]

  * To start the Desktop GUI on the Pi: enter ~startx~ in the terminal

  * Popular Linux distros:
    - Kali (cybersecurity / hack functionality)
    - Trisquel9 (by GNU project, politically clean)
    - Pop!_OS (popular for gamers)
    - Ubuntu (extra popular, also App on Windows)
    - Arch (minimal Linux for budding experts)
    - Manjaro (available via Raspberry Pi Imager) based on Arch Linux
    - ...and many more - see [[https://linuxhint.com/best-linux-distros-2022/][Best Linux Distros for 2022]]
      ([[distro][Tirthakar, 2021]]) for fanboys/fangirls.

  * Then there are the great architectures - Debian, SUSE etc. - more
    about that when we talk about the history of Raspbian Linux for Pi.

  * Install commands with the ~apt~ package manager program:
    #+begin_example
    $ sudo apt install [package]
    #+end_example
    E.g. for ~tree~ as ~[package]~.

  * ~whoami~ returns the current user

  * ~/~ is the root directory, ~$HOME~ of the user ~root~ (super-user)
  
* w4s8 (02/03/22)

  * *FAQ:* should you upgrade my Operating System (Windows or Mac)
    when you're asked to do so? (Question for discussion -
    interested what y'all think, and what your experiences are).

  * Raspberry Pi documentation - e.g. on [[https://www.raspberrypi.com/documentation/computers/using_linux.html][terminal/Linux commands]], or
    on the [[https://www.raspberrypi.com/documentation/computers/os.html][Raspbian Operating System]].

  * Inspiring video (11 min): [[https://youtu.be/ZDfhcA0SCiM][Raspberry Pi Projects]] ([[tjfree][TJ Free, 2020]]).

  * Library: [[https://lyon.on.worldcat.org/search?queryString=raspberry+Pi][Raspberry Pi Ebooks in the Mabee-Simpson library]]

* Glossary

  | WHAT            | DEFINITION                               | PURPOSE                     |
  |-----------------+------------------------------------------+-----------------------------|
  | Motherboard (h) | CPU + controllers + system bus + memory  | Connect with I/O devices    |
  | Bootloader (p)  | Computer startup sequence                | Find and load OS            |
  | ROM/EPROM (h)   | [Erasable Programmable] Read-Only-Memory | Permanent firmware          |
  | CMOS (h)        | Complementary Metal-Oxide Semiconductor  | BIOS memory                 |
  | BIOS (s)        | [Basic Input Output System]              | Identify/configure hardware |
  | BPMN            | Business Process Model and Notation      | Process diagram language    |
  | sudo            | Linux shell command                      | Super user privileges       |

  Legend: h=hardware, p=process, s=software

* References
  * Computer History Museum (Sep 5, 2019). History of Databases
    [video]. [[https://youtu.be/KG-mqHoXOXY][URL: youtu.be/KG-mqHoXOXY]].
  * <<sql>> Computerphile (Jun 15, 2016). Running an SQL Injection
    Attack - Computerphile [video]. [[https://youtu.be/ciNHn38EyRc][URL: youtu.be/ciNHn38EyRc]].
  * Grubb (2021). How Cybersecurity Really Works. NoStarch Press.
  * <<intel>> Intel (n.d.). What is Clock Speed? [website]. [[https://www.intel.com/content/www/us/en/gaming/resources/cpu-clock-speed.html][URL:
    intel.com.]]
  * <<noobs>> Raspberry Pi Foundation (n.d.). Installing Raspbian with
    NOOBS [website]. [[https://projects.raspberrypi.org/en/projects/noobs-install][URL: projects.raspberrypi.org]].
  * OccupyTheWeb (2018). Linux Basics for Hackers. NoStarch Press.
  * Parisi (14 May 2002). Complex Systems: a Physicist's Viewpoint
    [preprint]. [[https://arxiv.org/abs/cond-mat/0205297][URL: arxiv.org.]]
  * PuTTY (n.d.). SSH and telnet client program for Windows. [[https://www.putty.org/][URL:
    www.putty.org.]]
  * Savin (2022). Linux Device Drivers: Tutorial for Linux Driver
    Development [website]. [[https://www.apriorit.com/dev-blog/195-simple-driver-for-linux-os][URL: www.apriorit.com]].
  * Simma (2004). Parallel Computing on APE Systems [website]. [[https://www-zeuthen.desy.de/apewww/APE/software/asm/anext/][URL:
    www-zeuthen.desy.de.]]
  * The Computer Chronicles (Nov 8, 2012). Operating Systems
    (1984). [[https://youtu.be/V5S8kFvXpo4][URL: youtu.be/V5S8kFvXpo4.]]
  * <<distro>> Tirthakar (2021). Best Linux Distros for 2022
    [blog]. [[https://linuxhint.com/best-linux-distros-2022/][URL: linuxhint.com]].
  * <<tjfree>> TJ Free (Mar 13, 2020). Raspberry Pi Projects
    [video]. [[https://youtu.be/ZDfhcA0SCiM][URL: youtu.be/ZDfhcA0SCiM]].
  * xkcd (n.d.). A webcomic [website]. [[https://xkcd.com/][URL: xkcd.com]].
* Footnotes

[fn:2]Word origin: /arbitrari/ (Latin) = to resolve a dispute [because
on a computer many different parties compete for available resources]

[fn:1]Word origin: /abs-trahere/ (Latin) = to withdraw [from
details] - abstraction is the opposite of specialization (add detail)

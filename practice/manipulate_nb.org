#+TITLE:Manipulate files and data
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:OS Practice CSC 420 Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both
#+PROPERTY: header-args:bash :results output
* Practice

  * [ ] Get this file with ~wget https://
  * [ ] You can ALSO get this Org-mode file for practice [[https://github.com/birkenkrahe/os420/tree/main/practice][from GitHub]].
  * [ ] Since you're on Linux, setup and using the notebook is easy.

** Building a playground

   * Change to your ~$HOME~ directory
   * Print your working directory
   * Make a directory ~playground~
   * Switch on the verbose option
   * Check that it worked using the wildcard ~play*~

   #+begin_src bash
     cd $HOME
     pwd
     mkdir -v playground
     echo "found:" play*
   #+end_src

   Results:
   #+begin_example
   : /home/pi
   : mkdir: created directory 'playground'
   : found: playground
   #+end_example

** Creating directories

   * Change directory to ~playground~[fn:1]
   * Print your working directory
   * Make two directories ~dir1~ and ~dir2~
   * Switch on the verbose option
   * Check that it worked using the wildcard ~*[0-9]~

   #+name: make_dirs
   #+begin_src bash
     cd ~/playground
     pwd
     mkdir -v dir1 dir2
     echo "found:" *[0-9]
   #+end_src

   Results:
   #+begin_example
   : /home/pi/playground
   : mkdir: created directory 'dir1'
   : mkdir: created directory 'dir2'
   : found: dir1 dir2
   #+end_example

** Copying files

   * Copy ~/etc/passwd~ into the current working directory
   * Switch on the verbose option
   * Check that it worked using the wildcard ~pass??~

   #+name: copy_file
   #+begin_src bash
     cd ~/playground
     cp -v /etc/passwd .
     echo "found:" pass??
   #+end_src

   Results:
   #+begin_example
   : '/etc/passwd' -> './passwd'
   : found: passwd

   * Copy ~/etc/passwd~ again, with the verbose and interactive option
   * If you reply ~y~, the file will be overwritten[fn:2]
   * If you reply ~n~, nothing happens
   * List the file with a timestamp to check
   * Use the wildcard class ~pa[[ :lower: ]]~ (without whitespace)

   #+name: copy_warning_y
   #+begin_src bash :cmdline < y.txt
     cd ~/playground
     cp -vi /etc/passwd .
     ls --full-time pa[[:lower:]]*
   #+end_src

   #+RESULTS: copy_warning_y
   : cp: overwrite './passwd'? '/etc/passwd' -> './passwd'
   : -rw-r--r-- 1 pi pi 1992 2022-02-22 07:50:29.311660983 -0600 passwd
   #+end_example

** Moving and renaming files

   * Change the name of ~passwd~ to ~fun~
   * Switch on the verbose option
   * Check that it worked with the wildcard ~*fun*~

   #+name: move_file
   #+begin_src bash
     cd ~/playground
     mv -v passwd fun
     echo "found:" *fun*
   #+end_src

   Results:
   #+begin_example
   : renamed 'passwd' -> 'fun'
   : found: fun
   #+end_example

   * Move the renamed file ~fun~ to directory ~dir1~
   * Check that it worked with ~ls -l~
   * Move ~fun~ from ~dir1 to ~dir2~ in one command
   * Check that it worked with ~ls -l~
   * Move ~fun~ back to the current working directory
   * Check that it worked with ~ls -l~

   #+name: move_file_to_dir
   #+begin_src bash
     cd ~/playground
     mv -v fun dir1
     ls -l dir1
     mv -v dir1/fun dir2
     ls -l dir2
     mv -v dir2/fun .
     ls -l .
   #+end_src

   Results:
   #+begin_example
   renamed 'fun' -> 'dir1/fun'
   total 4
   -rw-r--r-- 1 pi pi 1992 Feb 22 08:23 fun
   renamed 'dir1/fun' -> 'dir2/fun'
   total 4
   -rw-r--r-- 1 pi pi 1992 Feb 22 08:23 fun
   renamed 'dir2/fun' -> './fun'
   total 12
   drwxr-xr-x 2 pi pi 4096 Feb 22 08:23 dir1
   drwxr-xr-x 2 pi pi 4096 Feb 22 08:23 dir2
   -rw-r--r-- 1 pi pi 1992 Feb 22 08:23 fun
   #+end_example

   * Move file ~fun~ into ~dir1~ again
   * Move directory ~dir1~ into ~dir2~
   * Confirm that the file is there with ~ls -l~

   #+name: move_dir_to_dir
   #+begin_src bash
     cd ~/playground
     mv -v fun dir1
     mv -v dir1 dir2
     ls -l dir2/dir1
   #+end_src

   RESULTS:
   #+begin_example
   : renamed 'fun' -> 'dir1/fun'
   : renamed 'dir1' -> 'dir2/dir1'
   : total 4
   : -rw-r--r-- 1 pi pi 1992 Feb 22 08:23 fun
   #+end_example   

   * Note that ~dir1~ was moved into ~dir2~ because it existed
   * If it had not existed, ~dir1~ would have been renamed ~dir2~

   * Put everthing back and confirm at the end with ~ls -l~

   #+name: move_back
   #+begin_src bash
     cd ~/playground
     mv -v dir2/dir1 .
     mv -v dir1/fun .
     ls -l ~/playground
   #+end_src

   RESULTS:
   #+begin_example
   : renamed 'dir2/dir1' -> './dir1'
   : renamed 'dir1/fun' -> './fun'
   : total 12
   : drwxr-xr-x 2 pi pi 4096 Feb 22 08:34 dir1
   : drwxr-xr-x 2 pi pi 4096 Feb 22 08:34 dir2
   : -rw-r--r-- 1 pi pi 1992 Feb 22 08:23 fun
   #+end_example

** Creating hard links

   * Create a hard link ~fun-hard~ to ~fun~ in ~./~
   * Create a hard link ~fun-hard~ to ~fun~ in ~dir1~
   * Create a hard link ~fun-hard~ to ~fun~ in ~dir2~
   * Switch on the verbose option for ~ln~
   * Confirm with ~ls -l ./~ and with ~ls -l dir*~

   #+name: hard
   #+begin_src bash
     cd ~/playground
     ln -v fun fun-hard
     ln -v fun dir1/fun-hard
     ln -v fun dir2/fun-hard
     ls -l .
     ls -l dir*
   #+end_src

   RESULTS:
   #+begin_example
   : 'fun-hard' => 'fun'
   : 'dir1/fun-hard' => 'fun'
   : 'dir2/fun-hard' => 'fun'
   : total 16
   : drwxr-xr-x 2 pi pi 4096 Feb 22 08:38 dir1
   : drwxr-xr-x 2 pi pi 4096 Feb 22 08:38 dir2
   : -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun
   : -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun-hard
   #+end_example

   * The number ~4~ in the listing is the number of hard links that
     exist for the file (including the default link)

   * Show that ~fun~ and ~fun-hard~ are indeed the same files

   #+name: inode
   #+begin_src bash
   cd ~/playground
   ls -li fun*
   #+end_src

   RESULTS:
   #+begin_example
   : 647575 -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun
   : 647575 -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun-hard
   #+end_example

** Creating symbolic links

   * Create a symlink ~fun-sym~ to ~fun~ in ~./~
   * Create a symlink ~fun-sym~ to ~fun~ in ~dir1~
   * Create a symlink ~fun-sym~ to ~fun~ in ~dir2~
   * Switch on the verbose option for ~ln~
   * Confirm with ~ls -l ./~ and with ~ls -l dir*~

   #+name: soft
   #+begin_src bash
     cd ~/playground
     ln -vs fun fun-sym
     ln -vs fun dir1/fun-sym
     ln -vs fun dir2/fun-sym
     ls -l .
     ls -l dir*
   #+end_src

   RESULTS:
   #+begin_example
   'fun-sym' -> 'fun'
   'dir1/fun-sym' -> 'fun'
   'dir2/fun-sym' -> 'fun'
   total 16
   drwxr-xr-x 2 pi pi 4096 Feb 22 08:52 dir1
   drwxr-xr-x 2 pi pi 4096 Feb 22 08:52 dir2
   -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun
   -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun-hard
   lrwxrwxrwx 1 pi pi    3 Feb 22 08:52 fun-sym -> fun
   dir1:
   total 4
   -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun-hard
   lrwxrwxrwx 1 pi pi    3 Feb 22 08:52 fun-sym -> fun

   dir2:
   total 4
   -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun-hard
   lrwxrwxrwx 1 pi pi    3 Feb 22 08:52 fun-sym -> fun
   #+end_example

   * Create a symlink ~dir1-sym~ to ~dir1~ in ~./~

   #+name: soft_dir
   #+begin_src bash
     cd ~/playground
     ln -vs dir1 dir1-sym
     ls -l ./dir1*
   #+end_src

   RESULTS:
   #+begin_example
   : 'dir1-sym' -> 'dir1'
   : lrwxrwxrwx 1 pi pi    4 Feb 22 08:56 ./dir1-sym -> dir1
   : 
   : ./dir1:
   : total 4
   : lrwxrwxrwx 1 pi pi    4 Feb 22 08:56 dir1 -> dir1
   : -rw-r--r-- 4 pi pi 1992 Feb 22 08:23 fun-hard
   : lrwxrwxrwx 1 pi pi    3 Feb 22 08:52 fun-sym -> fun
   #+end_example

** Removing files and directories

   * Remove the hard link ~fun-hard~ in ~./~
   * Confirm with ~ls -l~

   * Remove ~fun~ and switch on verbose and interactive options
   * Confirm with ~ls -l~

   * Check that ~fun-sym~ is broken with ~less~

   * Remove the symbolic links
   * Confirm with ~ls -l~

   * Remove the playground

** Command summary

   | COMMAND | MEANING |
   |---------+---------|
   | cd      |         |
   | pwd     |         |
   | mkdir   |         |
   | echo    |         |
   | mv -v   |         |
   | rm -vr  |         |
   | ln -vs  |         |
   | ls -l   |         |

* Footnotes

[fn:2]In Org-mode, you need to use the ~:cmdline~ header argument and
redirect the input, in this case from a file ~y.txt~ that only
contains the character ~y~.

[fn:1]If you work with code blocks inside Emacs, you may have to
resort to absolute filenames to make sure that you are where you want
to be.

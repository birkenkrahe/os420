#+TITLE:Followup
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Followup for CSC420 Operating Systems Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* What is this?

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the
  *homework* (if any). The first point of call for any questions
  should be the FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my
  courses), and a [[https://github.com/birkenkrahe/os420/blob/main/FAQ.org][FAQ for CSC420]].

  You find the whiteboard photos [[https://drive.google.com/drive/folders/1A5gp0fIiVz126IbU9VKBKejF8xyNKQLW?usp=sharing][here in GDrive]].

* w1s1 (01/11/22)
** Homework (by Thursday 13-Jan)

   * [[https://github.com/][Register with GitHub]] (5 min)
   * Complete the [[https://docs.github.com/en/get-started/quickstart/hello-world][GitHub Hello World exercise]] (20 min)
   * +Give me your GitHub user name (email - with course ID - or
     Thursday in class)+ (no need - course is public)
   * Submit an issue to ~birkenkrahe/os420~ which confirms that you
     did the exercise!

** Stuff

   * [[https://github.com/birkenkrahe/os420/blob/main/agenda.org][Agenda]] - we covered all of it (and more) - agenda is available in
     GitHub only

   * There's been a long and still open debate in software engineering
     and computer science about the importance of learning languages
     over learning concepts.

   * When people speak of Linux they usually mean the 'kernel' (the
     part of the OS that's always "on"). When they say GNU/Linux, they
     mean kernel + a bundle of functions. The word "kernel" contains
     the German word 'Kern' for nucleus, or core (which in turn, I
     think, comes from the Latin word for heart, 'cor').

   * Showed a few books to demonstrate the relevance of Linux and
     command line skills to cybersecurity:

     [[./img/cybersec.png]]

     [[./img/hackers.png]]

   * [[https://www-zeuthen.desy.de/apewww/APE/software/asm/anext/][More about the APE]] (Ital. for "bee") parallel computer from the
     German particle lab DESY, Hamburg, and University of Rome La
     Sapienzia, Rome. Incidentally, one of the creators of this
     machine was [[https://en.wikipedia.org/wiki/Giorgio_Parisi][Giorgio Parisi]], who received the Nobel Prize for
     physics 2021 for [[https://arxiv.org/abs/cond-mat/0205297][his work on complexity]] (Parisi, 2022). One of my
     graduate student jobs was to take care of the first APE.

     [[./img/bees.gif]]

   * Showed Windows Cmd line, Windows PowerShell, and the ~bash~ shell,
     and summoned the wrath of Bill Gates by putting down Microsoft's
     attempts to provide half-hearted OS access. The GIF shows how the
     OS world might look like without Microsoft, Apple, Google:
     everybody's running Open Source (Linux)!

     [[./img/marathon.gif]]

   * Demonstrated remotely accessing a Linux from a Windows box using
     ~ssh~ both on the shell and inside GNU Emacs (using the Tramp
     package and the program ~plink~, which is part of ~PuTTY~).

     [[./img/tramp.gif]]

* w1s2 (01/13/22)
** GitHub assignment/DataCamp

   * DataCamp: You should all be in your courses now.
     - Your assignments are on one page but you'll be notified via
       schoology as soon as an assignment is due

   #+attr_html: :width 400px
   #+caption: DataCamp OS course member list
   [[./img/members.png]]

   * Importance of README files for packages that (super) users can
     build from source for their computer architecture (CPU) and OS

   * Git is about version control, developed by Linus Torvalds, who
     also is the ~main~ branch maintainer for the Linux kernel. Here
     is [[https://github.com/torvalds/linux][his GitHub repo with the kernel]].

   * This is what I was thinking of - worth watching: [[https://youtu.be/V5S8kFvXpo4][The Computer
     Chronicles - Operating Systems (1984)]]

     #+attr_html: :width 400px
     #+caption: Computer chronicles-OS (1984)
     [[./img/history.png]]

     * However, my first thought, [[https://youtu.be/KG-mqHoXOXY][History of Databases (2019)]] is also
       really relevant for OS, because it shows how an important
       application (database management systems) is developed in concert
       with the operating systems on which it runs

** Lecture on OS foundations

   * Why different models? Each POV is a different model. Models change
     with time and represent focus and interests (e.g. IT careers)

   #+attr_html: :width 400px
   #+caption: OS and computer hardware w/peripherals
   [[./img/hw.png]]

   * Diversity of architecture is like gaming success: a team
     consisting of 1 wizard + 1 dwarf + 1 elf has better chances to
     win than teams of three of each.

   #+attr_html: :width 400px
   #+caption: Architecture of Information Systems (ARIS) model
   [[./img/aris.png]]

   * Distinguish between PCs (solo), workstations (group, specific
     apps), and mainframe. They have different OS types.

** GNU Emacs installation

   #+attr_html: :width 600px
   #+caption: Real Programmers Use Emacs (Source: xkcd).
   [[./img/real_programmers.png]]

   * xkcd (xkcd.com) is a cartoonist/nerd with a healthy appreciation
     for IT and computing (and also science)
   * ~nano~ is a tiny GNU/Linux based editor
   * ~vim~ is another (slightly larger) GNU/Linux based editor
     (available for Windows and Mac)
   * ~ed~ is another editor, and ~sed~ on GNU/Linux is important for
     data science on the command line
   * ~cat~ is a viewing program

   * GNU Emacs v27 Windows installation: you need the
     ~emacs-27.1-x86_64-installer.exe~ [[http://gnu.freemirror.org/gnu/emacs/windows/emacs-27/][from this page]].

* w2s3 (01/18/22)
** Quiz 1


   THE QUIZ IS ON ... Schoology 9.30 - 9.45 AM

   FOLLOWED by brief FEEDBACK:

   * We'll do one of these per week
   * Any content questions?
   * Too much time? Too little?
   * Questions too hard? Too easy?
   * You should be able to see the correct solutions for rehearsal
   * A subset of these questions will become the final exam

** OS functions

   (Source: [[https://youtu.be/V5S8kFvXpo4][the Computer Chronicles 1984]])

   1. Establish interface
   2. Permit multiple users
   3. Manage data files
   4. Handle I/O
   5. Error recovery
   6. System accounting
   7. Maintenance accounting
   -----
   * CP/M: IBM PC operating system
   * Apple IIe (BASIC) - early Apple PC
   * FORTRAN (FORmula TRANslator - sci comp language)
   * New kids: Go(lang), Rust,...but in OS, C programming rules

** Review - OS position and purpose

   ABSTRACTION[fn:1]:
   * The computer can be viewed from different angles (models):
     - Computer architecture (e.g. ARIS or CPU+RAM+NVM)
     - User + applications + OS + hardware

   ARBITRATION[fn:2]:
   * The main (defining) job of the OS is to control and allocate
     computer resources
   * Users want easy of use + performance + hidden from view
   * Shared computers include mainframes and dedicated workstations

   DEFINITION:
   * The OS kernel is the program that runs on your computer at all
     times, and is always in (volatile) memory

   | COMPUTER PROGRAMS            | EXAMPLES           |
   |------------------------------+--------------------|
   | Operating System (OS) kernel | ~systemd~ /daemon/ |
   | System (control) programs    | ~bash~ /shell/     |
   | Application (user) programs  | ~emacs~ editor     |

** From bootstrapping to interrupts

   #+caption: A computer system (Source: Silberschatz et al, 2018)
   #+attr_html: :width 600px
   [[./img/system.png]]

   * Computer hardware = Motherboard (run) + Peripherals (I/O)

   * In the past, application software had to explicitly be connected
     and configured to the operating system (MS DOS, Apple DOS, CP/M)

   * Bootstrapping: the OS kernel program is loaded into (volatile)
     memory

   * Booting = the BIOS is executed, establishing the basic I/O
     structure

   * The system daemon (~systemd~ in Linux) starts other
     daemons/services

   * On Linux, firmware updates are not automatic, instead you apply
     them manually using ~sudo apt update~ and ~sudo apt upgrade -y~
     - ~sudo~ give super-user privileges
     - ~apt~ is a package manager program for Debian Linux systems
     - ~update~ and ~upgrade~ are system programs
     - ~-y~ is a flag ("do it without asking questions")

*** Input/Output (I/O) Operation

    #+caption: Input/Output (I/O) operation (schematic)
    #+attr_html: :width 600px
    [[./img/io.png]]


    | Organizational unit | Interrupt action                          |
    |---------------------+-------------------------------------------|
    | Device controller   | Raises interrupt signal                   |
    | CPU                 | Catches interrupt signal                  |
    |                     | Dispatches interrupt to interrupt handler |
    | Interrupt handler   | Clears interrupt                          |
    | CPU                 | Waits for next interrupt                  |

    #+caption: Input/Output (I/O) BPMN process diagram
    #+attr_html: :width 900px
    [[./img/ioprocess.png]]

    * [[https://www.apriorit.com/dev-blog/195-simple-driver-for-linux-os][Here is a tutorial]] to develop a simple device driver is developed
      (Savin, 2022). It doesn't do anything else but read characters
      from input and generating output on a device. The driver has to
      be attached to a file using the ~mknod~ - then the device can be
      addressed/configured etc. using that file.

* w2s4 (01/20/22)

** What does the OS manage? (With Linux examples)

   * Task / process management (ps -a)
   * Memory management (df -H)
   * File-system management (ls -la)
   * Network management (ifconfig) (ping)
   * Mass-storage management (sudo fdisk -l)
     
** Batch mode vs. interactive timesharing

   * Multitasking is a smart scheduling illusion
   * Virtual memory allows execution of large jobs
   * Timer used to prevent infinite loop or resource hogging

** User mode vs. kernel mode (with Linux examples)

   * Mode-bit (hardware) indicates user vs. kernel mode (hostname -a)
   * Kernel mode is privileged (sudo)
   * Modern OS: Virtual Machine Manager mode for guest VMs ([[https://www.virtualbox.org/][VirtualBox]])
   

** Captain's Log

   * We looked at different virtual OS solutions under Windows
   * We compared open source and commercial systems ("bloatware")
   * Linux has a package manager concept - you download/install only
     the software that you really need.
   * Linux will run on very old computers ("bare metal")
   * Three key issues in OS:
     - persistence (memory hardware)
     - concurrency (process mgmt)
     - virtualisation (memory mgmt)
   * ~sudo~ is the Linux command for mode-bit = 0 ("kernel mode")
   
* Glossary

  | WHAT            | DEFINITION                               | PURPOSE                     |
  |-----------------+------------------------------------------+-----------------------------|
  | Motherboard (h) | CPU + controllers + system bus + memory  | Connect with I/O devices    |
  | Bootloader (p)  | Computer startup sequence                | Find and load OS            |
  | ROM/EPROM (h)   | [Erasable Programmable] Read-Only-Memory | Permanent firmware          |
  | CMOS (h)        | Complementary Metal-Oxide Semiconductor  | BIOS memory                 |
  | BIOS (s)        | [Basic Input Output System]              | Identify/configure hardware |
  | BPMN            | Business Process Model and Notation      | Process diagram language    |
  | sudo            | Linux shell command                      | Super user privileges       |

  Legend: h=hardware, p=process, s=software

* References

  Computer History Museum (Sep 5, 2019). History of Databases
  [video]. [[https://youtu.be/KG-mqHoXOXY][URL: youtu.be/KG-mqHoXOXY]].

  Grubb (2021). How Cybersecurity Really Works. NoStarch Press.

  OccupyTheWeb (2018). Linux Basics for Hackers. NoStarch Press.

  Parisi (14 May 2002). Complex Systems: a Physicist's Viewpoint
  [preprint]. [[https://arxiv.org/abs/cond-mat/0205297][URL: arxiv.org.]]

  PuTTY (n.d.). SSH and telnet client program for Windows. [[https://www.putty.org/][URL:
  www.putty.org.]]

  Savin (2022). Linux Device Drivers: Tutorial for Linux Driver
  Development [website]. [[https://www.apriorit.com/dev-blog/195-simple-driver-for-linux-os][URL: www.apriorit.com]].

  Simma (2004). Parallel Computing on APE Systems [website]. [[https://www-zeuthen.desy.de/apewww/APE/software/asm/anext/][URL:
  www-zeuthen.desy.de.]]

  The Computer Chronicles (Nov 8, 2012). Operating Systems
  (1984). [[https://youtu.be/V5S8kFvXpo4][URL: youtu.be/V5S8kFvXpo4.]]

  xkcd (n.d.). A webcomic [website]. [[https://xkcd.com/][URL: xkcd.com]].

* Footnotes

[fn:2]Word origin: /arbitrari/ (Latin) = to resolve a dispute [because
on a computer many different parties compete for available resources]

[fn:1]Word origin: /abs-trahere/ (Latin) = to withdraw [from
details] - abstraction is the opposite of specialization (add detail)

#+TITLE:Raspberry Pi Notes
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Raspberry Pi Notes
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* Raspberry Pi History

  #+caption: Raspberry Pi 4 Board (Source: raspberryptips.com)
  #+attr_html: :width 500px
  [[./img/piboard.png]]

  #+caption: Raspberry Pi 4 Board (Source: raspberryptips.com)
  #+attr_html: :width 500px
  [[./img/pimodels.png]]

  * [[https://community.element14.com/products/raspberry-pi/w/documents/879/identifying-your-model-of-raspberry-pi][Identify your model of Raspberry Pi]] (~cat /proc/cpuinfo~)

  * [[https://raspberrytips.com/which-raspberry-pi-os-is-running/][Identify your OS]] (~cat /etc/os-release)

* General Purpose Input Output (GPIO)
** GPIO pins

   Along one side of the Pi board, you find a row of 40 GPIO ("General
   Purpose Input Output") pins, which can be designated as an input or
   output pin.

** File system view

   In order to use the GPIO ports (software interfaces to the pins),
   you need to be a member of the ~gpio~ group. Look at
   ~/sys/class/gpio~[fn:1], and you can see that all files are owned by
   ~root~. To address pins, ~export~ and ~unexport~ are used.

   #+caption: sysfs pseudo filesystem /sys/class/gpio
   #+attr_html: :width 600px
   [[./img/gpiodir.png]]

   The two entries in green are symbolic links that point at device
   locations - ~soc~ is the "System On a Chip" that contains the CPU
   and the graphic chip.

   Source: [[tranter1][Tranter (2019)]]

** Graphic layout
   To see a graphic layout, use the command ~pinout~. This is a a
   Python tool that belongs to the [[https://gpiozero.readthedocs.io/en/stable/][GPIO Zero]] library.

   #+caption: sysfs pseudo filesystem /sys/class/gpio
   #+attr_html: :width 600px
   [[./img/pinout.png]]

** "Blinky" Python program

   Loading ~gpiozero~ enables you to run the basic [[blinky]] program - a
   LED connected to pin no. 17 will blink on and off repeatedly[fn:2].

   You can start/stop the program below with ~C-c C-c~ / ~C-g~.

   #+name blinky
   #+begin_src python :results none
     from gpiozero import LED
     from time import sleep

     led = LED(18)

     while True:
         led.on()
         sleep(1)
         led.off()
         sleep(1)
   #+end_src

   #+caption: "blinky" in action
   #+attr_html: :width 600px
   [[./img/blinky.jpg]]

** Viewing GPIO pins with C

   WiringPi is a C language GPIO library. To install it and test it
   that you have version 2.5.2:

   #+begin_example
   $ wget https://project-downloads.drogon.net/wiringpi-latest.deb
   $ sudo dpkg -i wiringpi-latest.deb
   $ gpio -v
   #+end_example

   The output of the version check also shows the Pi model and
   confirms GPIO access. ~M-x man RET gpio~ opens the UNIX man page.

   ~gpio readall~ reads and displays all GPIO pins with a
   representation of the pin numbers and names:

   #+caption: "blinky" in action
   #+attr_html: :width 600px
   [[./img/readall.png]]

   Here you can see that the [physical] GPIO pin no. 12 is addressed by
   the CPU [BCM] as no. 18.

** Commandline "blinky"

   Using ~gpio~, we can make the LED blink by using the pin number:

   #+begin_src bash :results none
     gpio -g blink 18 # use BCM GPIO pin number
     gpio -g toggle 18 # switch the value on/off
   #+end_src

   #+begin_src bash :results none
     gpio -1 blink 12  # use physical GPIO pin number
     gpio -1 toggle 12 # switch the value on/off
   #+end_src

   Abort the command with ~C-g~. The ~toggle~ command is necessary to
   switch the activated LED off again.

   Source: [[sunfounder][SunFounder (2021)]] and [[tranter2][Tranter (2019)]]

** IoT with Pi

   See e.g. [[leechang][Lee and Chang (2021)]], or [[fairhead][Fairhead (2016)]].

* My first Pi

  The hippie case is alluding to my checquered past.

  #+attr_html: :width 500px
  [[./img/pi2box.jpg]]

* Rasperry Pi 2 WiFi networking  <2022-01-05 Wed>
**  Problem
   WiFi dongle present (and powered - check with ~iwconfig
   -a~) but ~iwconfig~ shows no network activity, and ~ping~ is not
   working (website not recognized).

** Solution
   * Edit ~/etc/network/interfaces~ with the ~nano~ editor and put in
     the code block [[wlan]]. Put in the name (~ssid~) and WPA-~password~
     (you find these on your router), and save the file (~C-x y RET~).

   #+name: wlan
   #+begin_src sh
     # The loopback network interface
     auto lo
     iface lo inet loopback

     # The primary (wired) network interface
     iface eth0 inet dhcp

     # The wifi (wireless) network interface
     auto wlan0
     allow-hotplug wlan0
     iface wlan0 inet dhcp
     wpa-ssid "ssid"
     wpa-psk "password"
   #+end_src

   * Restart the Pi: ~sudo shutdown -r now~. Check that WiFi is up with [[iwconfig]]:
   #+name:iwconfig
   #+begin_src sh
     # display status of all interfaces
     iwconfig -a
     ping r-project.org
   #+end_src

   * ~sudo apt update~ and ~sudo apt upgrade -y~ to bring system up to
     date.
   * For WPA2/AES security, [[https://coderwall.com/p/v290ta/raspberry-pi-wifi-setup-with-wpa2-psk-aes][see here]].
   * To enable automatic reconnect, install ~wicd~ and start
     ~wicd-curses~:

     #+name:wicd
     #+attr_html: :width 500px
     [[./img/wicd.png]]

**  Sources
   * Solution: [[https://raspberrypi.stackexchange.com/questions/22349/wi-fi-dongle-not-working][stackexchange]]
   * WPA2/AES: [[https://coderwall.com/p/v290ta/raspberry-pi-wifi-setup-with-wpa2-psk-aes][coderwall.com]]
   * General information: [[https://www.electronicshub.org/setup-wifi-raspberry-pi-2-using-usb-dongle/][electronicshub.org]]
   * WICD information: [[https://ubidots.com/blog/setup-wifi-on-raspberry-pi-using-wicd/][ubidots.com]]

* Installing GNU Emacs  <2022-01-05 Wed>
  I need my favorite editor on the Pi (though ~nano~ does a good job
  for simple tasks)!

  * Check available disk space with ~df -h~.
  * ~sudo apt install emacs~

** Source:
   * [[https://www.gnu.org/software/emacs/download.html][GNU Emacs download page]]

* Access the Pi remotely with ~ssh~ <2022-01-05 Wed>

  * Enable ~ssh~ via the ~raspi-config~ menu
  * You can make sure that the service is up with ~sudo service
    --status-all~
  * For Windows: get ~PuTTY~ (MSI 64-bit x86 installer)
  * Get the IP address of the Pi with ~sudo hostname -I~. This will be
    the IP address on the local network (~192.168.1.135~)
  * Upon the first connect attempt, pick ~Access~ to establish the
    server's key (and make sure that it is trusted)
  * Login with the Pi's username and password, and you should be in.

    #+name:key
    #+attr_html: :width 500px
    [[./img/putty.png]]

    #+name:ssh
    #+attr_html: :width 500px
    [[./img/ssh.png]]

    And now I'm running GNU Emacs over ~ssh~:

    #+name:emacs
    #+attr_html: :width 500px
    [[./img/emacs.png]]

    To increase the font size in this window, right-click on the
    frame:

    #+begin_example
    Change Settings
    Window
     Appearance
      Change Font
      Apply
    #+end_example

    #+name:font
    #+attr_html: :width 500px
    [[./img/font.png]]

    You can also save the PuTTY session (but be aware that the
    hostname is likely to change when the WiFi connection drops
    intermittently):

    #+name:save
    #+attr_html: :width 500px
    [[./img/session.png]]

**  Sources

   * [[https://the.earth.li/~sgtatham/putty/0.76/htmldoc/index.html][PuTTY User Manual]]
   * [[https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html][PuTTY download]]
   * [[https://geek-university.com/raspberry-pi/enable-ssh-in-raspbian/][Enable ssh in Raspbian]]
   * [[https://pimylifeup.com/raspberry-pi-ip-address/][Find IP address of your Pi]]

* Running ~ssh~ inside Emacs with ~Tramp~ <2022-01-05 Wed>

  * Put ~plink.exe~ from the PuTTY folder into the Windows ~PATH~
  * In Emacs, execute (using the correct IP number):
  #+begin_src emacs-lisp
    Dired (directory): /plink:pi@192.168.1.xxx:/
  #+end_src
  * Enter the password and you're in.

    #+name:plink
    #+attr_html: :width 600px
    [[./img/plink.png]]

    * Advantage: now you can run a proper Linux shell inside Emacs. If
      the connection breaks, the ~*shell*~ buffer will be retained and
      if you reactivate it, the connection will be reopened.
    * ~M-x package-install RET tramp-theme RET~ installs custom theme
      (slight adaptation of the modeline)

** Source:
   * [[https://www.emacswiki.org/emacs/Tramp_on_Windows][EmacsWiki Tramp on Windows]]
   * [[https://youtu.be/Iqh50fgbIVk][Using Emacs - 25 tramp]] (video)

* SOMEDAY Pi as Backup Server
* References
  * <<fairhead>> Fairhead (2016). Raspberry Pi - IoT in C. I/O Press |
    Programmers Library. [[https://www.i-programmer.info/book-watch-archive/10163-raspberry-pi-iot-in-c-i-o-press.html][URL: i-programmer.info]].
  * <<leechang>> Lee and Chang (June 14, 2021). Introduction to IoT
    Using the Raspberry Pi [article]. [[https://www.codemag.com/article/1607071/Introduction-to-IoT-Using-the-Raspberry-Pi][URL: codemag.com]].
  * <<tranter1>> Tranter (July 10, 2019). GPIO Programming: Using the sysfs
    Interface. [[https://www.ics.com/blog/gpio-programming-using-sysfs-interface][URL: ics.com]].
  * <<tranter2>> Tranter (August 14, 2019). How to Control GPIO
    Hardware from C or C++. [[https://www.ics.com/blog/how-control-gpio-hardware-c-or-c][URL: ics.com]].
  * <<soren>> Soren (January 11, 2018). Making a LED blink using the Rasperry Pi
    and Python [blog]. [[https://raspberrypihq.com/making-a-led-blink-using-the-raspberry-pi-and-python/][URL: raspberrypihq.com]].
  * <<sunfounder>> SunFounder (2021). Blinking LED [website]. [[https://docs.sunfounder.com/projects/raphael-kit/en/latest/1.1.1_blinking_led_c.html][URL:
    docs.sunfounder.com]].
* Footnotes

[fn:2] You need to set the LED up using a breadboard, a resistor, and
jumper wires ([[https://raspberrypihq.com/making-a-led-blink-using-the-raspberry-pi-and-python/][see here]]).

[fn:1] The kernel program that enables this view is [[https://man7.org/linux/man-pages/man5/sysfs.5.html][~sysfs(5)~]]. It is
a pseudo filesystem that allows export of kernel objects to the user
space where they can be viewed and manipulated.

#+TITLE:Manipulate files and data
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:OS Practice CSC 420 Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both
#+PROPERTY: header-args:bash :results output
* README

  * Before working through this file, make sure you completed the
    getting started guide in ~start_nb.org~.

  * You can hide/open headers and codeblocks with the <TAB> key

  * You can get this file and the ~.emacs~ file from GDrive

  * The solutions and results herein were all obtained on a Pi

* Building a playground

  * Change to your ~$HOME~ directory
  * Print your working directory
  * Make a directory ~playground~
  * Switch on the verbose option
  * Check that it worked using the wildcard ~play*~

  #+name: mkdir_playground
  #+begin_src bash
    cd $HOME
    pwd
    mkdir -v playground
    echo "found:" play*
  #+end_src

  * [ ] Check task group

* Creating directories

  * Change directory to ~playground~[fn:1] - do this in every code
    block!
  * Print your working directory
  * Make two directories ~dir1~ and ~dir2~
  * Switch on the verbose option
  * Check that it worked using the wildcard ~*[0-9]~

  #+name: make_dirs
  #+begin_src bash
    cd ~/playground
    pwd
    mkdir -v dir1 dir2
    echo "found:" *[0-9]
  #+end_src

  * [ ] Check task group

* Copying files

  * Copy ~/etc/passwd~ into the current working directory
  * Switch on the verbose option
  * Check that it worked using the wildcard ~pass??~

  #+name: copy_file
  #+begin_src bash
    cd ~/playground
    cp -v /etc/passwd .
    echo "found:" pass??
  #+end_src

  * [ ] Check task group

* Moving and renaming files

  * Change the name of ~passwd~ to ~fun~
  * Switch on the verbose option
  * Check that it worked with the wildcard ~*fun*~

  #+name: move_file
  #+begin_src bash
    cd ~/playground
    mv -v passwd fun
    echo "found:" *fun*
  #+end_src

  * Move the renamed file ~fun~ to directory ~dir1~
  * Check that it worked with ~ls -l~
  * Move ~fun~ from ~dir1 to ~dir2~ in one command
  * Check that it worked with ~ls -l~
  * Move ~fun~ back to the current working directory
  * Check that it worked with ~ls -l~

  #+name: move_file_to_dir
  #+begin_src bash
    cd ~/playground
    mv -v fun dir1
    ls -l dir1
    mv -v dir1/fun dir2
    ls -l dir2
    mv -v dir2/fun .
    ls -l .
  #+end_src

  * Move file ~fun~ into ~dir1~ again
  * Move directory ~dir1~ into ~dir2~
  * Confirm that the file is there with ~ls -l~

  #+name: move_dir_to_dir
  #+begin_src bash
    cd ~/playground
    mv -v fun dir1
    mv -v dir1 dir2
    ls -l dir2/dir1
  #+end_src

  * Note that ~dir1~ was moved into ~dir2~ because it existed
  * If it had not existed, ~dir1~ would have been renamed ~dir2~
  * Put everthing back and confirm at the end with ~ls -l~

  #+name: move_back
  #+begin_src bash
    cd ~/playground
    mv -v dir2/dir1 .
    mv -v dir1/fun .
    ls -l ~/playground
  #+end_src

  * [ ] Check task group

* Creating hard links

  * Create a hard link ~fun-hard~ to ~fun~ in ~./~
  * Create a hard link ~fun-hard~ to ~fun~ in ~dir1~
  * Create a hard link ~fun-hard~ to ~fun~ in ~dir2~
  * Switch on the verbose option for ~ln~
  * Confirm with ~ls -l ./~ and with ~ls -l dir*~

  #+name: hard
  #+begin_src bash
    cd ~/playground
    ln -v fun fun-hard
    ln -v fun dir1/fun-hard
    ln -v fun dir2/fun-hard
    ls -l .
    ls -l dir*
  #+end_src

  * The number ~4~ in the listing is the number of hard links that
    exist for the file (including the default link)
  * Show that ~fun~ and ~fun-hard~ are indeed the same files

  #+name: inode
  #+begin_src bash
    cd ~/playground
    ls -li fun*
  #+end_src

  * [ ] Check task group

* Creating symbolic links

  * Create a symlink ~fun-sym~ to ~fun~ in ~./~
  * Create a symlink ~fun-sym~ to ~fun~ in ~dir1~
  * Create a symlink ~fun-sym~ to ~fun~ in ~dir2~
  * Switch on the verbose option for ~ln~
  * Confirm with ~ls -l ./~ and with ~ls -l dir*~

  #+name: soft
  #+begin_src bash
    cd ~/playground
    ln -vs fun fun-sym
    ln -vs fun dir1/fun-sym
    ln -vs fun dir2/fun-sym
    ls -l .
    ls -l dir*
  #+end_src

  * Create a symlink ~dir1-sym~ to ~dir1~ in ~./~

  #+name: soft_dir
  #+begin_src bash
    cd ~/playground
    ln -vs dir1 dir1-sym
    ls -l ./dir1*
  #+end_src

  * [ ] Check task group

* Removing files and directories

  * Remove the hard link ~fun-hard~ in ~./~ (with verbose option)
  * Confirm with ~ls -l~

  #+name: rm_hard
  #+begin_src bash
    cd ~/playground

  #+end_src

  * Remove ~fun~ and switch on verbose option[fn:2]
  * Confirm with ~ls -l~

  #+name: rm_fun
  #+begin_src bash :cmdline < y
    cd ~/playground

  #+end_src

  * [ ] Check that ~fun-sym~ is broken now with ~less~ (don't do this
    in Emacs, but change to a proper terminal instead). You should
    get:

    #+begin_example
    fun-sym: No such file or directory
    #+end_example

  * [ ] Make sure that you understand what "broken symbolic link" in
    this context means, and why ~fun-sym~ is now broken

  * Remove the symbolic links (switch on verbose option)
  * Confirm with ~ls -l~

  #+name: rm_sym
  #+begin_src bash
    cd ~/playground

  #+end_src

  * Go ~$HOME~ and remove the playground (with verbose option)
  * Check with ~ls -d~

  #+name: rm_playground
  #+begin_src bash
    cd $HOME

  #+end_src

  * [ ] Check this last task group

  * Save this file with ~C-x C-s~
  * Kill the buffer with ~C-x k~ (confirm)
  
  You may close Emacs!

* Command summary

  * [ ] Complete the table!

  | COMMAND | MEANING | EXAMPLE |
  |---------+---------+---------|
  | cd      |         |         |
  | pwd     |         |         |
  | mkdir   |         |         |
  | echo    |         |         |
  | mv -v   |         |         |
  | rm -vr  |         |         |
  | ln -vs  |         |         |
  | ls -l   |         |         |

* Footnotes

[fn:2]In Org-mode, you need to use the ~:cmdline~ header argument and
redirect the input, in this case from a file ~y~ that only
contains the character ~y~, which I created for this purpose.

[fn:1]If you work with code blocks inside Emacs, you may have to
resort to absolute filenames to make sure that you are where you want
to be.

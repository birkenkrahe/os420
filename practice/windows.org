#+TITLE:Manipulate files and data
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:OS Practice CSC 420 Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: header-args:bash :exports both
#+PROPERTY: header-args:bash :results output
* README

  * [ ] Before working through this file, make sure you completed the
    getting started guide in ~start_nb.org~.

  * [ ] You can hide/open headers and codeblocks with the <TAB> key

  * You can get this file and the ~.emacs~ file from GDrive

  * You can get Unix tools to do this at home by installing Cygwin

  * The solutions and results herein were all obtained in Windows

* Building a playground

  * Change to your ~$HOME~ directory
  * Print your working directory
  * Make a directory ~playground~
  * Switch on the verbose option
  * Check that it worked using the wildcard ~play*~
  * [X] Check task group

  #+name: mkdir_playground
  #+begin_src bash
    cd $HOME
    pwd
    mkdir -v playground
    echo "found:" play*
  #+end_src

  #+RESULTS: mkdir_playground
  : found: playground

* Creating directories

  * Change directory to ~playground~[fn:1] - do this in every code
    block!
  * Print your working directory
  * Make two directories ~dir1~ and ~dir2~
  * Switch on the verbose option
  * Check that it worked using the wildcard ~*[0-9]~
  * [X] Check task group

  #+name: make_dirs
  #+begin_src bash
    cd playground
    pwd
    mkdir -v dir1 dir2
    echo "found:" *[0-9]
  #+end_src

  #+RESULTS: make_dirs
  : mkdir: created directory 'dir1'
  : found: 100_10 FILE100 FILE1001 dir1 l_FILE100

* Copying files

  * Copy ~/etc/passwd~ into the current working directory
  * Switch on the verbose option
  * Check that it worked using the wildcard ~pass??~
  * [X] Check task group

  #+name: copy_file
  #+begin_src bash
    cd ~/playground
    cp -v /etc/passwd .
    echo "found:" pass??
  #+end_src

  #+RESULTS: copy_file
  : '/etc/passwd' -> '.'$'\r'
  : found: pass??
  
* Moving and renaming files

  * Change the name of ~passwd~ to ~fun~
  * Switch on the verbose option
  * Check that it worked with the wildcard ~*fun*~
  * [X] Check task group

  #+name: move_file
  #+begin_src bash
    cd ~/playground
    mv -v passwd fun
    echo "found:" *fun*
  #+end_src

  #+RESULTS: move_file
  : found: *fun*

  * Move the renamed file ~fun~ to directory ~dir1~
  * Check that it worked with ~ls -l~
  * Move ~fun~ from ~dir1 to ~dir2~ in one command
  * Check that it worked with ~ls -l~
  * Move ~fun~ back to the current working directory
  * Check that it worked with ~ls -l~
  * [X] Check task group

  #+name: move_file_to_dir
  #+begin_src bash
    cd ~/playground
    mv -v fun dir1
    ls -l dir1
    mv -v dir1/fun dir2
    ls -l dir2
    mv -v dir2/fun .
    ls -l .
  #+end_src

  #+RESULTS: move_file_to_dir
  #+begin_example
  total 0
  drwxrwxrwx 1 marcus marcus 512 Mar  2 21:07 dir1
  total 162
  -rwxrwxrwx 1 marcus marcus  6846 Mar  2 21:08 #windows.org#
  -rwxrwxrwx 1 marcus marcus     0 Feb 22 07:28 100_10
  -rwxrwxrwx 1 marcus marcus     0 Feb 22 07:28 10file
  -rwxrwxrwx 1 marcus marcus    20 Feb 22 07:28 FILE100
  -rwxrwxrwx 1 marcus marcus     0 Feb 22 07:28 FILE1001
  -rwxrwxrwx 1 marcus marcus     0 Feb 22 07:28 FILE100~~
  drwxrwxrwx 1 marcus marcus   512 Mar  2 21:09 dir2
  -rwxrwxrwx 1 marcus marcus     0 Feb 22 07:28 l_FILE100
  -rwxrwxrwx 1 marcus marcus  5962 Mar  2 21:04 manipulate_nb.org
  -rwxrwxrwx 1 marcus marcus  6636 Mar  2 21:05 manipulate_nb_03082022.org
  -rwxrwxrwx 1 marcus marcus  6913 Mar  1 06:44 manipulate_nb_03082022.org~
  -rwxrwxrwx 1 marcus marcus  6747 Mar  2 21:05 manipulate_nb_solution.org
  -rwxrwxrwx 1 marcus marcus  3912 Feb 28 21:00 manipulate_old.org
  drwxrwxrwx 1 marcus marcus   512 Mar  2 21:06 playground
  -rwxrwxrwx 1 marcus marcus   640 Feb 22 07:28 sample.txt
  -rwxrwxrwx 1 marcus marcus   640 Feb 22 07:28 sample1.txt
  -rwxrwxrwx 1 marcus marcus  3874 Mar  2 20:50 start_nb.org
  -rwxrwxrwx 1 marcus marcus 95857 Feb 28 22:44 start_nb.pdf
  drwxrwxrwx 1 marcus marcus   512 Feb 22 07:28 testdir
  -rwxrwxrwx 1 marcus marcus  7010 Mar  2 21:07 windows.org
  -rwxrwxrwx 1 marcus marcus  6747 Mar  2 21:05 windows.org~
  #+end_example

  * Move file ~fun~ into ~dir1~ again
  * Move directory ~dir1~ into ~dir2~
  * Confirm that the file is there with ~ls -l~
  * [ ] Check task group

  #+begin_quote
  THIS COMMAND FAILS IN WINDOWS BECAUSE SOMEHOW THE DIRECTORY
  PLAYGROUND WAS WRITTEN WITH STRANGE CHARACTERS AT THE END
  #+end_quote
  
  #+name: move_dir_to_dir
  #+begin_src bash
    cd ~/playground*
    mv -v fun dir1
    mv -v dir1 dir2
    ls -l dir2/dir1
  #+end_src

  #+RESULTS: move_dir_to_dir

  * Note that ~dir1~ was moved into ~dir2~ because it existed
  * If it had not existed, ~dir1~ would have been renamed ~dir2~
  * Put everthing back and confirm at the end with ~ls -l~
  * [ ] Check task group

  #+name: move_back
  #+begin_src bash
    cd ~/playground
    mv -v dir2/dir1 .
    mv -v dir1/fun .
    ls -l ~/playground
  #+end_src

* Creating hard links

  * Create a hard link ~fun-hard~ to ~fun~ in ~./~
  * Create a hard link ~fun-hard~ to ~fun~ in ~dir1~
  * Create a hard link ~fun-hard~ to ~fun~ in ~dir2~
  * Switch on the verbose option for ~ln~
  * Confirm with ~ls -l ./~ and with ~ls -l dir*~
  * [ ] Check task group

  #+name: hard
  #+begin_src bash
    cd ~/playground
    ln -v fun fun-hard
    ln -v fun dir1/fun-hard
    ln -v fun dir2/fun-hard
    ls -l .
    ls -l dir*
  #+end_src

  * The number ~4~ in the listing is the number of hard links that
    exist for the file (including the default link)
  * Show that ~fun~ and ~fun-hard~ are indeed the same files
  * [ ] Check task group

  #+name: inode
  #+begin_src bash
    cd ~/playground
    ls -li fun*
  #+end_src

* Creating symbolic links

  * Create a symlink ~fun-sym~ to ~fun~ in ~./~
  * Create a symlink ~fun-sym~ to ~fun~ in ~dir1~
  * Create a symlink ~fun-sym~ to ~fun~ in ~dir2~
  * Switch on the verbose option for ~ln~
  * Confirm with ~ls -l ./~ and with ~ls -l dir*~
  * [ ] Check task group

  #+name: soft
  #+begin_src bash
    cd ~/playground
    ln -vs fun fun-sym
    ln -vs fun dir1/fun-sym
    ln -vs fun dir2/fun-sym
    ls -l .
    ls -l dir*
  #+end_src

  * Create a symlink ~dir1-sym~ to ~dir1~ in ~./~
  * [ ] Check task group

  #+name: soft_dir
  #+begin_src bash
    cd ~/playground
    ln -vs dir1 dir1-sym
    ls -l ./dir1*
  #+end_src

* Removing files and directories

  * Remove the hard link ~fun-hard~ in ~./~
  * Confirm with ~ls -l~
  * [ ] Check task group

  #+name: rm_hard
  #+begin_src bash
    cd ~/playground

  #+end_src

  * Remove ~fun~ and switch on verbose option[fn:4]
  * Confirm with ~ls -l~
  * [ ] Check task group

  #+name: rm_fun
  #+begin_src bash
    cd ~/playground

  #+end_src

  * [ ] Check that ~fun-sym~ is broken with ~less~ (don't do this in
    Emacs, but change to a proper terminal). You should get:
  #+begin_example
    fun-sym: No such file or directory
  #+end_example

  * Remove the symbolic links (switch on verbose option)
  * Confirm with ~ls -l~
  * [ ] Check task group

  #+name: rm_sym
  #+begin_src bash
    cd ~/playground

  #+end_src

  * Go ~$HOME~ and remove the playground (with verbose option)
  * Check with ~ls -vl playground~
  * [ ] Check task group

  #+name: rm_playground
  #+begin_src bash
    cd ~/
    rm -vr playground
    ls -vl 
  #+end_src

  * Save this file with ~C-x C-s~
  * Kill the buffer with ~C-x k~ (confirm)
  * [ ] Check task group
  
  You may close Emacs!

* Command summary

  * [ ] Complete the second column

  | COMMAND | MEANING |
  |---------+---------|
  | cd      |         |
  | pwd     |         |
  | mkdir   |         |
  | echo    |         |
  | mv -v   |         |
  | rm -vr  |         |
  | ln -vs  |         |
  | ls -l   |         |

* Footnotes

[fn:3]Unfortunately, this command downloads a HTML file. I have not
been able to find out (yet) how to tweak ~wget~ to download the Org
file. Perhaps one of you want to give it a try!?

[fn:2]In Org-mode, you need to use the ~:cmdline~ header argument and
redirect the input, in this case from a file ~y.txt~ that only
contains the character ~y~.

[fn:1]If you work with code blocks inside Emacs, you may have to
resort to absolute filenames to make sure that you are where you want
to be.

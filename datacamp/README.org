#+PROPERTY: header-args:bash :results output
* Revising shell commands

  * [ ] Create ~fruit.txt~ with the words ~banana~, ~apple~ and ~carrot~ each
    on one line.

    #+begin_src bash :results output
      echo banana > fruits.txt
      echo apple >> fruits.txt
      echo carrot >> fruits.txt
      cat fruits.txt
    #+end_src

    #+RESULTS:
    : banana
    : apple
    : carrot

  * [ ] Run ~grep 'a'~ on ~fruits.txt~

    #+begin_src bash :results output
      grep 'a' fruits.txt
    #+end_src

    #+RESULTS:
    : banana
    : apple
    : carrot

  * [ ] Regular expressions: square parentheses are a matching set,
    and ~^~ inverts the set. This looks for any line with a ~p~ or a ~c~ in
    it.

    #+begin_src bash :results output
      grep '[pc]' fruits.txt
    #+end_src

    #+RESULTS:
    : apple
    : carrot

  * [ ] ~grep -v~ inverts the search, too, and looks for anything that
    does not have the search pattern characters in it.

    #+begin_src bash :results output
      grep -v '[pc]' fruits.txt
    #+end_src

    #+RESULTS:
    : banana

  * [ ] ~sort uniq -c~ will sort the input alphabetically and then count
    distinct entries. ~new_fruits.txt~ has more lines in it, but still
    the three words.

    In the command, ~sort~ is important because ~uniq~ can only run on
    adjacent entries. ~new_fruits_sorted.txt~ is teed off after ~sort~ to
    confirm this.

    #+begin_src bash
      cat new_fruits.txt | sort | tee new_fruits_sorted.txt | uniq -c | head -n 3
    #+end_src

    #+RESULTS:
    :       6 apple
    :       5 banana
    :       6 carrot

  * [ ] ~egrep~ is the same as ~grep -E~ and amounts to an OR operator
    between different patterns. That is, ~egrep 'p|q'~ checks if either
    ~p~ or ~q~ are found.

    #+name: egrep
    #+begin_src bash
      cat new_fruits.txt | egrep 'na|ca' | wc -l
    #+end_src

    #+RESULTS:
    : 11

* Your first bash script

  * [ ] Create a bash file ~fruit.sh~ that executes the code in
    [[egrep]]. Print it first, then run it using the code block below.

    #+begin_src bash
      cat fruit.sh
      . fruit.sh
    #+end_src

    #+RESULTS:
    : #!/usr/bin/bash
    : cat new_fruits.txt | egrep 'na|ca' | wc -l
    : 11

  * [ ] When you run shell commands outside of an Emacs code block,
    you need to change file permissions. Change permissions for
    ~fruit.sh~ so that the owner can run the file from the shell, too!

    #+begin_src bash
      chmod u+x fruit.sh
      ls -l fruit.sh
    #+end_src

    #+RESULTS:
    : -rwxr--r-- 1 pi pi 59 Apr 11 22:58 fruit.sh

  * [ ] Change the permissions of this file for all using the ~700~ or
    ~755~ octal codes.

    #+begin_src bash
      chmod 755 fruit.sh
      ls -l fruit.sh
    #+end_src

    #+RESULTS:
    : -rwxr-xr-x 1 pi pi 59 Apr 11 22:58 fruit.sh


* Standard streams and arguments

  * [ ] Create an example script ~args.sh~

    #+begin_example bash
      #~/usr/bin/bash
      echo $1
      echo $@
      echo "There are " $# "arguments"
    #+end_example

  * [ ] Run the script with a few words as arguments:

    #+begin_src bash
      . args.sh one two
    #+end_src

    #+RESULTS:
    : one
    : two
    : one two
    : There are  2 arguments

  * [ ] Now do it on your own:

    - Write a script ~echo.sh~ that echos out the *second* and *fourth*
      argument of your input only
    - Then echo out the entire ~ARGV~ array
    - Then echo out the size of the array
    - Run the script with the arguments
    #+begin_example bash
      one two three four five six seven
    #+end_example

    #+begin_src bash
      . echo.sh  one two three four five six seven
    #+end_src

    #+RESULTS:
    : two
    : four
    : one two three four five six seven
    : 7

  * [ ] Do this in the code block below. ~array~ stores your arguments
    already. Tangle the code and run it on the command line.

    #+begin_src bash :cmdline < array :tangle echo1.sh
      echo "argument no. 2: " $2
      echo "argument no. 4  " $4
      echo "all arguments: "  $@
      echo "number of args: " $#
    #+end_src

    #+RESULTS:
    : argument no. 2: 
    : argument no. 4  
    : all arguments: 
    : number of args:  0

#+TITLE:Agenda
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Agenda DB330 Database Theory and Applications
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* w1s1 (01/11/22)

  #+attr_html: :width 500px
  [[./img/fivearmies.jpg]]

  * Aspiration and ambition (Lyon Data Science program)
  * Introduction to the course & the lecturer
  * Homework assignments: *GitHub*, DataCamp, Emacs
  * What's next?

** Aspirations and ambitions (DS program 2021-2023)

   | CLASS                                 | CODE    | TERM        | Topics                              |
   |---------------------------------------+---------+-------------+-------------------------------------|
   | Data Science Tools and Methods        | DSC 101 | Fall 2021   | R, Basic EDA, Base R                |
   | Introduction to Advanced Data Science | DSC 205 | Spring 2022 | R, Advanced EDA, Tidyverse          |
   | Database Theory and Applications      | CSC 330 | Spring 2022 | SQL, SQLite                         |
   | Operating Systems                     | CSC 420 | Spring 2022 | Bash, awk, sed, regular expressions |
   | Data Visualization                    | DSC 302 | Fall 2022   | D3, Processing, Javascript, Bokeh   |
   | Machine Learning                      | DSC 305 | Spring 2023 | Predictive algorithms, neural nets  |
   | Digital Humanities                    | CSC 105 | Spring 2023 | Data science applications           |

** Introduction to the course & the lecturer

   #+attr_html: :width 500px
   #+caption: DESY APE research group, Hamburg/Rome, 1994
   [[./img/desy.jpg]]

   * Why me?
   * Syllabus for this course ([[https://lyon.schoology.com/course/5516220833/materials/gp/5549927065][Schoology]])

** Homework assignments week 1 (11-Jan/13-Jan-2022)

   #+attr_html: :width 600px
   [[./img/homework.png]]

   * GitHub Hello World Exercise ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][Info: FAQ]])
   * DataCamp platform registration ([[https://lyon.schoology.com/course/5516220833/materials][Link: Schoology]])
   * GNU Emacs installation ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-emacs-ess-under-windows-and-macos][Info: FAQ]])

*** GitHub

**** What is it?

     * Software development platform
     * Built around Git by Linus Torvalds
     * Bought by Microsoft in 2018
     * AI support (e.g. [[https://copilot.github.com/][GitHub Copilot]])

     Watch: "[[https://youtu.be/w3jLJU7DT5E][What is GitHub?]]" (GitHub, 2016)

     #+attr_html: :width 500px
     [[./img/github.gif]]
     /Gif: "So long binder of requirements" Source: GitHub/

**** Why are we using it?

     /Image: Org-mode file in GitHub/
     #+attr_html: :width 500px
     [[./img/org.png]]

     * It's free
     * To host course materials
     * Upload assignments (esp. Emacs Org-files)
     * Discussion
     * Wiki for collaboration
     * Complements Schoology[fn:2]

**** What will you have to do?

     * [[https://github.com][Sign up with GitHub]] - use Lyon Email
     * Pick an available username *using your own first and last name*,
       e.g. ~MarcusBirkenkrahe~, or ~DonaldTrump~
     * [[https://docs.github.com/en/get-started/quickstart/hello-world][Complete the "Hello World" exercise]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.md#completing-the-github-hello-world-exercise][FAQ]])
     * Give me your GitHub username so that I can add you as a
       collaborator to my private ~os420~ repository
     * [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][Create an issue]] from the [[https://github.com/birkenkrahe/cc100/issues][~os420~ repository]] like in the example
       below (except from your account instead of mine).
     -----
     /Image: Issue "Assignment completed"/
     #+attr_html: :width 500px
     [[./img/issue.png]]
     -----
     #+begin_quote
     If you do have a GitHub account already, do the exercise anyway
     using your existing account (it takes 10 min)! Make sure you
     let me know what your user name is so that I can add you to my
     repo.
     #+end_quote

**** What else can you do?

     * You can [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][fork]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~os420~]] repository
     * You can [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions][watch]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~os420~]] repository - and set [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications][~Notifications~]] to
       ~Participating and @mentions~ so that you see my comments (see
       image below).

     #+attr_html: :width 300px
     [[./img/watch.png]]
     /Image: Notifications settings when watching a repository/

     * You can [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][submit issues]] from the repository (e.g. if you notice
       mistakes or if you want extra information, or to share a link)
     * You can participate in [[https://github.com/birkenkrahe/cc100/discussions][discussions]] (sometimes I will make you)
     * You can add to the [[https://github.com/birkenkrahe/cc100/wiki][wiki]] (e.g. comments and links to interesting
       resources)
     * You can install the [[https://github.com/mobile][mobile app]] on your smartphone[fn:3]
     * You can use it as a platform for [[https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects][projects]] or [[https://github.com/features/codespaces][coding]]
     * You can download the [[https://desktop.github.com/][desktop client]] to manage repos on your PC
       (see image below).

     /Image: GitHub desktop client commit/
     #+attr_html: :width 800px
     [[./img/gh.png]]


*** DataCamp

    #+attr_html: :width 400px
    [[./img/datacamp.png]]

    * Why are we using it?
    * How are we using it?
    * What will you have to do?


*** GNU Emacs

    #+attr_html: :width 400px
    [[./img/emacs.png]]

    * Why are we using it?
    * How are we using it?
    * What will you have to do?

** What's next?

   * See schedule ([[https://github.com/birkenkrahe/os420/blob/main/schedule.org][GitHub]])
   * Watch online lecture on "Systems" (to be published)
   * Everything else => followup notes (GitHub)
   * +See you (hopefully) Thursday in class! (Lyon 104)+

* w1s2 (01/13/22)
** Overview

   | HOW      | WHAT                                          |
   |----------+-----------------------------------------------|
   | Review   | [[file:~/Documents/GitHub/org/FAQ.org::Completing the GitHub "hello world" exercise][GitHub Hello World exercise]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][FAQ]])             |
   | Lecture  | What operating systems do                     |
   | Practice | [[file:~/Documents/GitHub/org/FAQ.org:: How to install Emacs (+ESS) under Windows and MacOS][Install GNU Emacs]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-emacs-ess-under-windows-and-macos][FAQ]])                       |
   | Demo     | [[https://www.gnu.org/software/emacs/tour/][Emacs guided tour]]                             |
   | Self     | [[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][Work through the Emacs onboard tutorial (18p)]] |

** Objectives

   * [X] Understand the basics of Git

   * [X] Describe the general organization of a computer system

   * [X] Install the GNU Emacs editor on your OS

   * [ ] Understand how GNU Emacs works

   * [ ] Make GNU Emacs work for you

* w2s3 (01/18/22)
** Overview

   | HOW          | WHAT                                                |
   |--------------+-----------------------------------------------------|
   | Review (S)   | [[https://lyon.schoology.com/assignment/5563838206][Quiz: course, OS foundations / GNU Emacs]]            |
   | Resource (S) | [[https://www.youtube.com/watch?v=zJTqTs7Ujr8&list=PLW1yb8L3S1ngGmtKlI5XYcTNQQ1r3xZvq][Fundamentals of Operating Systems YouTube playlist]]  |
   | Lecture (S)  | Interrupts / I/O operations example / bootstrapping |
   | Demo         | [[https://www.gnu.org/software/emacs/tour/][Emacs guided tour]]                                   |
   | Self         | [[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][Work through the Emacs onboard tutorial (18p)]]       |

   /Nachtrag: watch [[file:followup.org::Lecture on OS foundations][History of Databases]] and The Computer Chronicles/

** Objectives

   * [X] Review / retention: complete Schoology Quiz 1 (15 min)

   * [X] Understand bootstrapping, and interrupts management

   * [X] Understand how basic I/O processes work

   * [ ] Understand how GNU Emacs works

   * [ ] Make GNU Emacs work for you

** What's next?

   * GNU Emacs practice exercises (class)
   * Computer system architecture
   * Getting started with Pi

* w2s4 (01/20/22)
** Overview

   | HOW      | WHAT                                    |
   |----------+-----------------------------------------|
   | Lecture  | Storage structure & OS management tasks |
   | Practice | [[file:~/Documents/GitHub/org/emacs/emacs.org::GNU Emacs][Emacs guided tour]] ([[https://www.gnu.org/software/emacs/tour/][tour]])([[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][tutorial]])      |

** Objectives

   * [X] Storage structure, User vs kernel mode, multiprogramming

   * [X] Management tasks of the Operating System

   * [X] Virtualization and open source vs commercial system

   * [X] Understand how GNU Emacs works

   * [ ] Make GNU Emacs work for you

** What's next?

   * Operating system services & design principles
   * Emacs practice & assignment
   * Getting started with Pi: bootloading Raspbian Linux
   * Complete quiz 2 online *before class*
   * Will do 5 min review in class together

* w3s5 (01/25/22)
** Overview

   | HOW        | WHAT                                         |
   |------------+----------------------------------------------|
   | Summary    | Foundations of Operating Systems (10 tenets) |
   | Preview    | DataCamp course "[[https://app.datacamp.com/learn/courses/introduction-to-shell][Introduction to Shell]]"      |
   |------------+----------------------------------------------|
   | Practice   | Open three shells inside Emacs               |
   | [[https://lyon.schoology.com/assignment/5603304144/info][Assignment]] | Create ~hello world~ shell program in Emacs  |

** Objectives

   * [X] Summarize foundations of operating systems

   * [X] Understand how GNU Emacs shells work

   * [X] Understand the first DataCamp assignment ([[https://app.datacamp.com/learn/courses/introduction-to-shell][Intro to Shell]])

   * [ ] Create an bash(1) hello world program in the shell

   * [ ] Run shell program inside Emacs

** Summary: foundations of operating systems
*** 10 tenets
    1) An operating system is software that manages the computer
       hardware, as well as providing an environment for application
       programs to run.

    2) Interrupts are a key way in which hardware interacts with the
       operating system. A hardware device triggers an interrupt by
       sending a signal to alert the CPU, whose interrupt handler
       manages the interrupt.

    3) For a computer to do its job, programs must be loaded in main
       memory (RAM), which is the only memory area that the CPU can
       access directly.

    4) To best utilize the CPU, the OS can handle several jobs in
       memory at the same time so that there's always one job to
       execute. True multitasking, however, is an illusion.

    5) To prevent user programs from interfering, the system hardware
       has two modes: user mode and kernel ("sudo") mode.

    6) Privileged instructions that can only be executed in kernel mode
       include: switching to kernel mode; I/O control; time management;
       interrupt management.

    7) Process management includes creating and deleting processes, and
       providing process communication and synchronization. Processes
       are active, programs are passive.

    8) Memory management means that the OS keeps track of what parts of
       memory are being used and by whom, and dynamically freeing and
       allocating memory.

    9) Storage space is managed by the OS through file systems (files,
       directories) and managing space on mass-storage devices.

    10) Virtualization involves abstracting a computer's hardware into
        several different execution environments.

*** Short definition

    #+begin_quote
    The Operating System takes physical resources (CPU, memory, disk),
    and *virtualizes* them. It handles *concurrent* processes, and it
    stores files *persistently* to make them safe in the long term.
    #+end_quote

*** OS attributes

    - *Performance* / overhead reduction
    - *Protection* between applications, and between OS and apps
    - *Isolation* of processes from one another
    - *Reliability* of operations
    - *Security* against malicious attacks
    - *Mobility* across, and towards smaller, and embedded devices

*** OS Timeline

    | Early era        | OS are just libraries with (human) batch |
    | Mainframe era    | Protection through the system handler    |
    | Minicomputer era | Interrupt-based memory management        |
    | PC era           | DOS attacks and infinite MacOS loops     |
    | Modern era       | Linux and the return to sanity           |

    #+caption: Unix the white knight of Operating Systems
    #+attr_html: :width 200px
    [[./img/knight.png]]

** DataCamp course: Introduction to Shell

   #+begin_quote
   This chapter is a brief introduction to the Unix shell. You'll learn
   why it is still in use after almost 50 years, how it compares to the
   graphical tools you may be more familiar with, how to move around in
   the shell, and how to create, modify, and delete files and folders.
   #+end_quote

** Three shells inside Emacs!

   * Works really well only under Linux or MacOS

   | SHELL COMMAND | CHARACTERISTICS         | MODELINE     |
   |---------------+-------------------------+--------------|
   | ~M-x shell~   | Windows shell ~CMD.exe~ | ~*shell*~    |
   | ~M-x eshell~  | Lisp simulated shell    | ~*eshell*~   |
   | ~M-x term~    | Terminal emulator       | ~*terminal*~ |

   Cp. the variable ~shell-file-name~.

   * Start Emacs from the terminal: ~emacs -nw -q~
   * Start all three shells in Emacs
   * Start Emacs with ~emacs -nw inside an Emacs ~*shell*~

     #+begin_quote
     You should get the error message ~emacs: standard input is not a
     tty~. TTY stands for "TeleTYpewriter". The (Unix) ~tty~ command is
     used to check if the output is a terminal or not (see [[https://en.wikipedia.org/wiki/Tty_(Unix)][Wikipedia]]).
     #+end_quote

     #+caption:
     #+attr_html: :width 500px
     [[./img/wintty.png]]

   On Linux (Ubuntu App in Windows 10):

   #+caption:
   #+attr_html: :width 200px
   [[./img/tty.png]]

*** Assignment: hello world!

    #+caption: Windows CMD shell in Emacs and hello world pgm
    #+attr_html: :width 600px
    [[./img/hello.png]]

*** Next @Pi: eshell demo ~cpu.c~

    * Start several processes using ~cpu.exe~
    * Show process list with ~jobs~
    * Kill processes in list with ~d~
    * Start same processes in Ubuntu
    * Kill processes with ~kill~

** What's next?

   * Review 'hello world' shell exercise
   * Fix ~.emacs~ issue on desktop computers
   * Getting started with Pi: bootloading Raspbian Linux

* w3s6 (01/27/22)
** Overview

   | HOW      | WHAT                                            |
   |----------+-------------------------------------------------|
   | Review   | ~hello.sh~ [[https://lyon.schoology.com/assignment/5603304144/info][assignment]]                           |
   | Fix      | ~.emacs~ issue (https://tinyurl.com/lyonemacs   |
   |          | Find the file on the lab desktop                |
   |          | Put it into the ~$HOME~ directory               |
   |          | Restart Emacs                                   |
   |----------+-------------------------------------------------|
   | Practice | Getting started with Raspberry Pi: installation |

** Objectives

   * [X] Review ~hello.sh~ exercise

   * [X] Install Raspberry Pi OS (Raspbian Linux) via NOOBS

   * [X] Complete basic Pi setup with ~sudo raspi-config~

** Review assignment

   * Start Emacs without init file

   #+begin_example
   > emacs -nw -q
   #+end_example

   * Known ~Class not registered~ error on Windows 10 ([[https://www.drivereasy.com/knowledge/fix-class-not-registered-error-on-windows-10-solved/][fix]]). See notes
     for a quick solution (installing CygWin). 

** Set up Raspberry Pi

   1) Open the box in front of you

   2) Take out the Pi and connect it to the KVM switch

   3) Connect the Ethernet cable to the Pi

   4) Plug in the power cord and then plug it into the Pi

   5) Install using NOOBS

   6) Get the password from me!

   7) Open a terminal app on the Pi

   8) In terminal, enter ~sudo raspi-config~

   9) In the configurator, change boot options > Desktop/GUI to
      ~Console autologin~, then <TAB> to <Finish>

   10) Reboot the Pi (~sudo reboot~)

   11) Login as user ~pi~ with password

   12) Check network connection with ~ifconfig~

   13) Update OS with ~sudo apt update~

   14) Upgrade OS with ~sudo apt upgrade -y~

   15) Install Emacs with ~sudo apt install emacs~

   16) Start emacs, check it and exit again

   17) Finish session with ~sudo shutdown now~

   18) Unplug the power chord, then the KVM connections

   19) Return Pi to box

   20) Cross yourself and close the box.

** What's next

   * Review first DataCamp assignment
   * Explore Linux on the command line

* w4s7 (02/02/22)
** Overview

   | HOW         | WHAT                                      |
   |-------------+-------------------------------------------|
   | Lecture     | Raspberry Pi - the hardware & the history |
   | FAQ         | Should you upgrade your Operating System? |
   |-------------+-------------------------------------------|
   | Review      | DataCamp assignment 1                     |
   |-------------+-------------------------------------------|
   | Pi Practice | Manipulating files and folders            |

** Objectives

   * [ ] Review Introduction to the shell - Files and folders

   * [ ] Raspberry Pi: hardware and history

   * [ ] Learn to manipulate files and folders (Org notes)

** Review assignment

** What's next

